# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VJcHYoEiYOw6FMdLW2ar21kuM4NBiZjE
"""

import streamlit as st
import pandas as pd
import joblib
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')



# --- Load dataset and train model ---
@st.cache_resource
def load_model():
    df = pd.read_csv(r"/content/drive/MyDrive/exercise/exercise.csv")
    df = df[['Gender', 'Age', 'Height', 'Weight', 'Duration', 'Heart_Rate', 'Body_Temp','Calories']].dropna()

    le = LabelEncoder()
    df['Gender'] = le.fit_transform(df['Gender'])  # male=1, female=0

    X = df[['Gender', 'Age', 'Height', 'Weight', 'Duration', 'Heart_Rate', 'Body_Temp']]
    y = df['Calories']

    model = LinearRegression()
    model.fit(X, y)

    return model, le

model, le = load_model()

# --- Streamlit Web App UI ---
st.title("ðŸ’ª Calorie Burn Estimator")
st.write("Enter your details below to estimate the calories burned during exercise.")

# User Inputs
gender = st.selectbox("Gender", ["male", "female"])
age = st.number_input("Age", min_value=5, max_value=100, value=25)
height = st.number_input("Height (cm)", min_value=50.0, max_value=250.0, value=170.0)
weight = st.number_input("Weight (kg)", min_value=10.0, max_value=200.0, value=70.0)
duration = st.number_input("Duration of Exercise (minutes)", min_value=1.0, max_value=300.0, value=30.0)
heart_rate = st.number_input("Heart Rate (bpm)", min_value=50, max_value=200, value=100)
body_temp = st.number_input("Body Temperature (Â°C)", min_value=30.0, max_value=45.0, value=37.0)

if st.button("Predict Calories Burned"):
    gender_encoded = le.transform([gender])[0]
    user_data = pd.DataFrame([[gender_encoded, age, height, weight,
                               duration, heart_rate, body_temp]],
                             columns=['Gender', 'Age', 'Height', 'Weight', 'Duration', 'Heart_Rate', 'Body_Temp'])

    prediction = model.predict(user_data)[0]
    st.success(f"ðŸ”¥ Estimated Calories Burned: **{prediction:.2f}**")